
package com.smartbt.vtsuite.boundary.ws;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceException;
import javax.xml.ws.WebServiceFeature;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.4-b01
 * Generated source version: 2.2
 * 
 */
@WebServiceClient(name = "TLS", targetNamespace = "http://web.service.fileloader.tc.com/", wsdlLocation = "https://www.istreamdeposit.com/TLS?wsdl")
public class TLS_Service
    extends Service
{

    private final static URL TLS_WSDL_LOCATION;
    private final static WebServiceException TLS_EXCEPTION;
    private final static QName TLS_QNAME = new QName("http://web.service.fileloader.tc.com/", "TLS");

    static {
        URL url = null;
        WebServiceException e = null;
        try {
            url = new URL("https://www.istreamdeposit.com/TLS?wsdl");
        } catch (MalformedURLException ex) {
            e = new WebServiceException(ex);
        }
        TLS_WSDL_LOCATION = url;
        TLS_EXCEPTION = e;
    }

    public TLS_Service() {
        super(__getWsdlLocation(), TLS_QNAME);
    }

    public TLS_Service(WebServiceFeature... features) {
        super(__getWsdlLocation(), TLS_QNAME, features);
    }

    public TLS_Service(URL wsdlLocation) {
        super(wsdlLocation, TLS_QNAME);
    }

    public TLS_Service(URL wsdlLocation, WebServiceFeature... features) {
        super(wsdlLocation, TLS_QNAME, features);
    }

    public TLS_Service(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public TLS_Service(URL wsdlLocation, QName serviceName, WebServiceFeature... features) {
        super(wsdlLocation, serviceName, features);
    }

    /**
     * 
     * @return
     *     returns TLS
     */
    @WebEndpoint(name = "TLSPort")
    public TLS getTLSPort() {
        return super.getPort(new QName("http://web.service.fileloader.tc.com/", "TLSPort"), TLS.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns TLS
     */
    @WebEndpoint(name = "TLSPort")
    public TLS getTLSPort(WebServiceFeature... features) {
        return super.getPort(new QName("http://web.service.fileloader.tc.com/", "TLSPort"), TLS.class, features);
    }

    private static URL __getWsdlLocation() {
        if (TLS_EXCEPTION!= null) {
            throw TLS_EXCEPTION;
        }
        return TLS_WSDL_LOCATION;
    }

}
